extends layout.pug

block main
  h2 New snippet
  
  form#snippet(method="get")._stacked
    //- ------------------------- 
    //- "PREAMBLE" INPUTS
    //- ------------------------
    section.naming-inputs._packed
      label._stacked
        | Name
        input#name(type="text")
      ._stacked
        ._packed
          label(for="trigger") Trigger
          .switch
            label 
              | Text
              input#trigger-type--text(checked type="radio", name="trigger-type" value="text")
            label 
              | Regex
              input#trigger-type--regex(type="radio", name="trigger-type" value="regex")
          .key-hint
            | r
        input#trigger(type="text")
    
    section._grid.flags-inputs
      label
        ._stacked
          ._packed
            input#flag-i(type="checkbox", name="flag-i")
            | In-word expansion
            .key-hint i
          p.explanation
            | Expand even if the character before the cursor is not a space
      
      label
        ._stacked
          ._packed
            input#flag-A(type="checkbox", name="flag-A")
            | Expand automatically
            .key-hint A
          p.explanation
            | Expand as soon as you type the trigger, no need to press #[kbd Tab]
      
      label
        ._stacked
          ._packed
            input#flag-b(type="checkbox", name="flag-b")
            | Beginning of line
            .key-hint b
          p.explanation
            | Only expand if the characters before the cursor are only spaces
      
    //- ------------------------- 
    //- "CONTENT" INPUTS
    //- ------------------------
    section._packed.content-inputs
      label._stacked
        ._packed
          | Content
          span.explanation 
            | Please use “\” before any of the special characters to insert them literaly: \, $, `, {
        textarea#content(name="content", cols="30", rows="10")
      
      ._stacked._tabbed(data-current-tab-controller="current-tab")
        ._tabs._packed
          label
            input#tab--add-tab-stops(checked type="radio", name="current-tab" value="add-tab-stops")
            | Add tab stops
          label
            input#tab--add-code(type="radio", name="current-tab" value="add-code")
            | Add code
        
        ._stacked(data-tab="add-tab-stops")
          label
            input#tabstop-type--position(type="radio", name="tabstop-type" value="position")
            | Just a tabstop
          
          .grouped-inputs
            label._stacked
              ._packed._toggler
                input#tabstop-type--default(type="radio", name="tabstop-type" value="default")
                span With a default text
              label._stacked
                | Pre-fill with…
                input#tabstop-default-text(type="text")
            
            label._stacked
              ._packed._toggler
                input#tabstop-type--substitution(type="radio", name="tabstop-type" value="substitution")
                span With substitution
              label._stacked
                | Replace…
                input#tabstop-substitution-find(type="text")
              label._stacked
                ._packed
                  span With…
                  a(href="https://github.com/SirVer/ultisnips/blob/e83c82099d9bd43dc7895e3cb5b114ee5a2a07c6/doc/UltiSnips.txt#L1256") learn more
                input#tabstop-substitution-replace(type="text")
            
          p Access on the #[input#tabstop-position(type="text")]nth #[kbd Tab] press
          
          button#insert-tabstop Insert tab stop
          
        ._stacked(data-tab="add-code")
          
          section(data-if="not-in-code")
            p Insert code
            ._packed
              button#insert-code-python Python
              button#insert-code-vimscript VimScript
              button#insert-code-shell Shell
          
          section(data-if="in-python-code")
            p Get a tabstop value
            ._packed
              span Tabstop ##[input#tabstop-reference-position(type="text")]
              button#insert-tabstop-reference Insert
          
          section(data-if="in-python-code and trigger-type-is-regex")
            p Get a regex trigger's group
            ._packed
              span Group ##[input#trigger-regex-group-reference(type="text")]
              button#insert-trigger-regex-group-reference Insert
    //- ------------------------- 
    //- 'DIRECTIVES' INPUTS
    //- ------------------------
    section.directives-inputs._packed
      label._stacked
        | Priority
        input#priority(type="number", name="priority")
      
      label._stacked
        | Post-jump
        input#post-jump(type="text", name="post-jump")
        
      label._stacked
        | Context
        input#context(type="text", name="context")
    
  //- ------------------------- 
  //- OUTPUT
  //- ------------------------
  section.output._stacked#analyze
    label._stacked
      | Result
      textarea#result(name="result", cols="30", rows="10")
    
    ._packed
      button#copy-result Copy result
      button#analyze-btn Analyze
