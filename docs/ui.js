// Generated by LiveScript 1.6.0
(function(){
  var c, el, els, id, ids, snippet, updateResult, bindToElement, updateSnippetObject, insertAtCursor, disableOtherInputs, disableButton, enableButton, disableInsertTabstopButton, disableInsertTriggerRegexGroupButton;
  c = console.log;
  el = document.querySelector.bind(document);
  els = document.querySelectorAll.bind(document);
  id = document.getElementById.bind(document);
  ids = function(it){
    return it.map(function(it){
      return id(it);
    });
  };
  /*
  Tab handling
  */
  els('._tabbed').forEach(function(tabbedContent){
    var currentTabController, activeTab;
    currentTabController = tabbedContent.dataset.currentTabController;
    activeTab = '';
    return tabbedContent.querySelectorAll("input[type=radio][name='" + currentTabController + "']").forEach(function(tabSelector){
      var setActiveTab;
      setActiveTab = function(){
        var activeTab;
        if (tabSelector.checked) {
          activeTab = tabSelector.value;
          return tabbedContent.querySelectorAll('[data-tab]').forEach(function(tabContent){
            if (tabContent.dataset.tab === activeTab) {
              return tabContent.setAttribute('data-tab-active', '');
            } else {
              return tabContent.removeAttribute('data-tab-active');
            }
          });
        }
      };
      tabSelector.addEventListener('change', setActiveTab);
      return setActiveTab();
    });
  });
  /*
  Snippet generation
  */
  snippet = {
    priority: null,
    postJump: null,
    context: null,
    trigger: '',
    name: '',
    flags: {
      b: false,
      i: false,
      w: false,
      r: false,
      t: false,
      s: false,
      m: false,
      e: false,
      A: false
    },
    content: ''
  };
  updateResult = function(){
    if (document.focusedElement !== id('result')) {
      id('result').value = generateSnippet(
      snippet);
      return c(snippet);
    } else {
      return c('not updating, focused element is the result.');
    }
  };
  updateResult();
  bindToElement = function(elementId, snippetProperty){
    snippetProperty == null && (snippetProperty = null);
    c("binding to " + elementId);
    return id(elementId).addEventListener('input', function(){
      snippet[snippetProperty || elementId] = id(elementId).value;
      return updateResult();
    });
  };
  ['priority', 'name', 'trigger', 'content', 'context'].forEach(function(el){
    return bindToElement(el);
  });
  bindToElement('post-jump', 'postJump');
  ids(['trigger-type--regex', 'trigger-type--text']).forEach(function(it){
    return it.addEventListener('change', function(){
      snippet.flags.r = id('trigger-type--regex').checked;
      return updateResult();
    });
  });
  ['b', 'i', 'A'].forEach(function(flag){
    return id("flag-" + flag).addEventListener('change', function(){
      snippet.flags[flag] = id("flag-" + flag).checked;
      return updateResult();
    });
  });
  /*
  Snippet parsing
  */
  updateSnippetObject = function(){
    var bindToSnippetProperty;
    bindToSnippetProperty = function(elementId, snippetProperty){
      snippetProperty == null && (snippetProperty = null);
      return id(elementId).value = snippet[snippetProperty || elementId];
    };
    ['priority', 'name', 'trigger', 'content', 'context'].forEach(function(it){
      return bindToSnippetProperty(it);
    });
    bindToSnippetProperty('post-jump', 'postJump');
    id('trigger-type--regex').checked = snippet.flags.r;
    id('trigger-type--text').checked = !snippet.flags.r;
    return ['b', 'i', 'A'].forEach(function(it){
      return id("flag-" + it).checked = snippet.flags[it];
    });
  };
  id('analyze-btn').addEventListener('click', function(){
    import$(snippet, extractSnippet(
    id('result').value));
    return updateSnippetObject();
  });
  /*
  Tab stop/code insertion
  */
  insertAtCursor = function(text){
    var textarea, sel, startPos, endPos;
    textarea = id('content');
    if (document.selection) {
      textarea.focus();
      sel = document.selection.createRange();
      sel.text = text;
    } else {
      if (textarea.selectionStart || textarea.selectionStart === '0') {
        startPos = textarea.selectionStart;
        endPos = textarea.selectionEnd;
        textarea.value = textarea.value.substring(0, startPos) + text + textarea.value.substring(endPos, textarea.value.length);
      } else {
        textarea.value += text;
      }
    }
    updateResult();
    return textarea.focus();
  };
  id('insert-tabstop').addEventListener('click', function(it){
    it.preventDefault();
    insertAtCursor(
    generateTabstop({
      position: parseInt(
      id('tabstop-position').value),
      defaultValue: id('tabstop-type--default').checked ? id('tabstop-default-text').value : null,
      substitution: id('tabstop-type--substitution').checked ? ['find', 'replace'].map(function(it){
        return id("tabstop-substitution-" + it).value;
      }) : null
    }));
    return false;
  });
  /*
  Check radio button when clicked on relevant fields
  */
  els('[id^=tabstop-substitution]').forEach(function(it){
    return it.addEventListener('focus', function(){
      return id('tabstop-type--substitution').click();
    });
  });
  id('tabstop-default-text').addEventListener('focus', function(){
    return id('tabstop-type--default').click();
  });
  /*
  Disable inputs not relevant to currently-selected tabstop type
  */
  disableOtherInputs = function(){
    var contentToToggle;
    contentToToggle = id('tabstop-type--default').parentElement.parentElement.querySelector('._toggled');
    if (id('tabstop-type--default').checked) {
      contentToToggle.classList.remove('_disabled');
    } else {
      contentToToggle.classList.add('_disabled');
    }
    contentToToggle = id('tabstop-type--substitution').parentElement.parentElement.querySelector('._toggled');
    if (id('tabstop-type--substitution').checked) {
      return contentToToggle.classList.remove('_disabled');
    } else {
      return contentToToggle.classList.add('_disabled');
    }
  };
  els('[id^=tabstop-type--]').forEach(function(it){
    return it.addEventListener('change', disableOtherInputs);
  });
  disableOtherInputs();
  /*
  Disable insert tabstop button if the tabstop position is empty
  */
  disableButton = function(elementId){
    var button, whyIsItDisabled;
    button = id(elementId);
    whyIsItDisabled = button.dataset.whyDisabled;
    button.setAttribute('disabled', '');
    if (whyIsItDisabled) {
      return button.setAttribute('title', whyIsItDisabled);
    }
  };
  enableButton = function(elementId){
    var button;
    button = id(elementId);
    button.removeAttribute('disabled');
    return button.removeAttribute('title');
  };
  disableInsertTabstopButton = function(){
    if (!id('tabstop-position').value) {
      return disableButton('insert-tabstop');
    } else {
      return enableButton('insert-tabstop');
    }
  };
  id('tabstop-position').addEventListener('input', disableInsertTabstopButton);
  disableInsertTabstopButton();
  /*
  Insert code
  */
  els('[id^=insert-code-]').forEach(function(it){
    return it.addEventListener('click', function(it){
      return insertAtCursor(
      generateCodeEmbed({
        language: it.target.id.replace('insert-code-', ''),
        content: ''
      }));
    });
  });
  /*
  Insert tabstop reference
  */
  id('insert-tabstop-reference').addEventListener('click', function(){
    if (id('tabstop-reference-position').value) {
      return insertAtCursor(
      generateTabstopReference({
        language: 'python',
        position: Number(
        id('tabstop-reference-position').value)
      }));
    }
  });
  /*
  Insert trigger regex group reference
  */
  id('insert-trigger-regex-group-reference').addEventListener('click', function(){
    if (id('trigger-regex-group-reference-index').value) {
      return insertAtCursor(
      generateTriggerRegexGroupReference({
        language: 'python',
        position: Number(
        id('trigger-regex-group-reference-index').value)
      }));
    }
  });
  /*
  Disable Insert trigger regex group reference button when trigger is not regex
  */
  disableInsertTriggerRegexGroupButton = function(){
    if (id('trigger-type--regex').checked) {
      return enableButton('insert-trigger-regex-group-reference');
    } else {
      return disableButton('insert-trigger-regex-group-reference');
    }
  };
  els('[id^=trigger-type--]').forEach(function(it){
    return it.addEventListener('change', disableInsertTriggerRegexGroupButton);
  });
  disableInsertTriggerRegexGroupButton();
  function import$(obj, src){
    var own = {}.hasOwnProperty;
    for (var key in src) if (own.call(src, key)) obj[key] = src[key];
    return obj;
  }
}).call(this);
